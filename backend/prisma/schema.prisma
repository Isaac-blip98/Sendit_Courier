// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  phone            String
  role             Role      @default(CUSTOMER)
  profileImage     String?
  resetCode        String?
  resetCodeExpires DateTime?
  sentParcels      Parcel[]  @relation("SentParcels")
  receivedParcels  Parcel[]  @relation("ReceivedParcels")

  // Courier-specific fields
  isAvailable     Boolean           @default(false)
  currentLat      Float?
  currentLng      Float?
  assignedParcels Parcel[]          @relation("CourierParcels")
  locationHistory CourierLocation[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  ParcelTracking ParcelTracking[]
}

model Parcel {
  id                String  @id @default(uuid())
  senderId          String
  receiverId        String
  assignedCourierId String?

  receiverName   String
  receiverPhone  String
  pickupAddress  String
  pickupLat      Float
  pickupLng      Float
  destination    String
  destinationLat Float
  destinationLng Float
  weightCategory WeightCategory
  status         ParcelStatus   @default(PENDING)

  pickedUpAt        DateTime?
  deliveredAt       DateTime?
  estimatedDistance Float?

  sender          User  @relation("SentParcels", fields: [senderId], references: [id])
  receiver        User  @relation("ReceivedParcels", fields: [receiverId], references: [id])
  assignedCourier User? @relation("CourierParcels", fields: [assignedCourierId], references: [id])

  events         ParcelEvent[]
  trackingPoints ParcelTracking[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([senderId])
  @@index([receiverId])
  @@index([assignedCourierId])
}

// New model for tracking parcel location in real-time
model ParcelTracking {
  id        String @id @default(uuid())
  parcelId  String
  courierId String
  courier   User   @relation(fields: [courierId], references: [id])

  latitude  Float
  longitude Float
  address   String? // Optional human-readable address
  timestamp DateTime @default(now())

  parcel Parcel @relation(fields: [parcelId], references: [id])

  @@index([parcelId])
  @@index([timestamp])
}

// Track courier location history
model CourierLocation {
  id        String @id @default(uuid())
  courierId String
  courier   User   @relation(fields: [courierId], references: [id])

  latitude  Float
  longitude Float
  address   String?
  timestamp DateTime @default(now())

  @@index([courierId])
  @@index([timestamp])
}

model ParcelEvent {
  id        String       @id @default(uuid())
  parcelId  String
  status    ParcelStatus
  location  Json?
  notes     String? // Optional notes for status changes
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  parcel Parcel @relation(fields: [parcelId], references: [id])

  @@index([parcelId])
}

enum Role {
  ADMIN
  CUSTOMER
  COURIER // Add courier role
}

enum ParcelStatus {
  PENDING // Parcel created, waiting for pickup
  PICKED // Admin marked as picked (courier has it)
  IN_TRANSIT // Courier has left pickup location
  DELIVERED // Parcel reached destination
  CANCELLED // Cancelled by admin
}

enum WeightCategory {
  LIGHT
  MEDIUM
  HEAVY
}
